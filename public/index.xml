<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>D</title>
    <link>https://dongri.github.io/index.xml</link>
    <description>Recent content on D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Jan 2017 23:25:44 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>開発環境をLinuxにした</title>
      <link>https://dongri.github.io/post/2017-01-14-ubuntu.html</link>
      <pubDate>Sat, 14 Jan 2017 23:25:44 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2017-01-14-ubuntu.html</guid>
      <description>

&lt;p&gt;開発者のMac離れ?(去年からそういう噂があるけど)の流れで年末帰国時に買って来た
Mi Notebook Air (&lt;a href=&#34;http://www.mi.com/mibookair/&#34;&gt;http://www.mi.com/mibookair/&lt;/a&gt;) にLinuxを入れて開発環境を構築してみた。
Mi Notebook Airは1.07kgでMacBook Air1.35kgより軽くてリュックが非常に軽くなった。&lt;/p&gt;

&lt;h2 id=&#34;macが嫌いになった理由&#34;&gt;Macが嫌いになった理由&lt;/h2&gt;

&lt;p&gt;自分は強烈なApple, Macファンでもないが、常に新しいMacBookを買って開発環境にしてた。しかし、
今回のMacBook TouchBarにはがっかりした。なかなか慣れないキーボードのパチパチ感、仕様にはバッテリーで
最大10時間使えると書いてあるのに実はフル充電から４時間ほどしか使えないし、macOSのバージョンアップで
バッテリ残量の残り時間も消したりしてappleに対しての不信感が増してきた。&lt;/p&gt;

&lt;h2 id=&#34;ubuntuにした理由&#34;&gt;Ubuntuにした理由&lt;/h2&gt;

&lt;p&gt;別にLinux OSとvimさえあればいいというエンジニアもいるかも知らないが、自分の場合は業務開発端末としては
ある程度GUIツールを使わないといけないのでLinux Desktopでシェアが一番高いUbuntuにした。
実はUbuntu Desktopにもいろんなディストリビューションがあって選択が非常に多くて、
3日かけて以下の順に試してみたが、最終的にはUbuntuにした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ubuntu -&amp;gt; kubuntu -&amp;gt; xubuntu -&amp;gt; budgie -&amp;gt; gnome -&amp;gt; mate -&amp;gt; elementary os -&amp;gt; ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;xubuntuは非常に軽い、budgieは非常に格好いい、elementary osはインタフェースがmacと似ていて操作しやすい。
それぞれメリットもあればデメリットもあった。dropboxのアイコンが表示されなかったり同期できなかったり、
OS Update後起動できなくなかったり、Chromeがクラッシュしたりと不安定なものもあった。
サードパーティ製のアプリ見ても標準ubuntuでは絶対正しく動くように開発されてるので、GUIツールをある程度使う
ためにはubuntuを使う必要があった。以上の理由からUbuntuにした。&lt;/p&gt;

&lt;h2 id=&#34;引越して困ったこと&#34;&gt;引越して困ったこと&lt;/h2&gt;

&lt;p&gt;言わなくてもわかるようにiOSの開発ができなくなった。覚悟した上で引っ越ししたので家にも会社にもMacを用意した。&lt;/p&gt;

&lt;p&gt;引越しで一番頑張って設定してみようとして失敗したのがVPNだった。VPN PPTPはデフォルトでサポートしてるが
l2tp ipsecは入ってなくて自前でなんとかしないといけなくて以下のツール使って頑張ったけどダメだった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nm-l2tp/network-manager-l2tp&#34;&gt;https://github.com/nm-l2tp/network-manager-l2tp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hwdsl2/setup-ipsec-vpn&#34;&gt;https://github.com/hwdsl2/setup-ipsec-vpn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとは1password。こいつは最初どうしようと思ったが、1pass CUIが何個かあってなんとかなった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/georgebrock/1pass&#34;&gt;https://github.com/georgebrock/1pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oggy/1pass&#34;&gt;https://github.com/oggy/1pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dlokesh/1pass&#34;&gt;https://github.com/dlokesh/1pass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;引越して良かったこと&#34;&gt;引越して良かったこと&lt;/h2&gt;

&lt;p&gt;プライベートも会社も開発環境がすべてDockerだったので、Docker for Macとさようならできたのがよかった。
そいつが使いにくいわけではないが、本来のDockerを使う感じがよかった。 &lt;code&gt;brew&lt;/code&gt; より &lt;code&gt;apt-get&lt;/code&gt; が好きだった。
LINE, Wechatなど余計なアプリ入れてなくて、terminal, chrome, atom しか入れてないんでコード書くのにもっと集中できる。&lt;/p&gt;

&lt;h2 id=&#34;これから&#34;&gt;これから&lt;/h2&gt;

&lt;p&gt;買ったMi Notebook Airのスペックが今まで使ってたMacBookに比べると低い。Docker container10個
以上立ち上げるとPCが重くなったりするので、このまま続けて業務と開発に障害が出なかったらもっとよいスペックの
PCを買ってこのままLinuxをサーバー開発環境マシーンにしようと思った。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Suica PASMO リーダー</title>
      <link>https://dongri.github.io/post/2016-12-18-NFC-Reader.html</link>
      <pubDate>Sun, 18 Dec 2016 15:58:44 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-12-18-NFC-Reader.html</guid>
      <description>&lt;p&gt;最近良く自分のPASMO残高を把握できず、改札口で引っかかって「ファック」と小さい声出した時がよくあって、
AndroidでPASMOの残高を確認できるアプリを探してみたが、どれも必要ない機能ががたくさんあるのとデザインがイマイチ、
且つうざい広告が出るので逆にイラッとしたり、自分のAndroidのせいか分からないが、クラッシュしまくったり、、、&lt;/p&gt;

&lt;p&gt;今週Android Payも出たし、FeliCaとかNFCの勉強も含めてアプリを開発してみようと思ってSuica, PASMOリーダーを作ってみることにした。&lt;/p&gt;

&lt;p&gt;一日でやっつけたもので処理は単純。かざすとアプリが起動して読み取ったデータを表示するだけ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.guncy.android.cardreader&#34;&gt;Play Store - Suica PASMO リーダー&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考になったページ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://osdn.net/projects/felicalib/wiki/suica&#34;&gt;FeliCa Library&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.denno.net/SFCardFan/&#34;&gt;路線、駅コード&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qiita.com/pear510/items/38f94d61c020a17314b6&#34;&gt;AndroidでFelica(NFC)のブロックデータの取得&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ダウンロード数がどれぐらいになるかわからないが、広告入れる予定もないし、機能追加しても課金する予定もないので、
オープンソースにしてメンテナンスして行こうと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/CardReader&#34;&gt;Github - CardReader&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;読み取れる件数は決まってるので、過去のデータを保存する機能&lt;/li&gt;
&lt;li&gt;CSVフォーマットでUSBストレージに保存する機能&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LINE Translate BOT</title>
      <link>https://dongri.github.io/post/2016-12-03-LINE-Translate-BOT.html</link>
      <pubDate>Sat, 03 Dec 2016 16:42:42 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-12-03-LINE-Translate-BOT.html</guid>
      <description>

&lt;p&gt;LINE BOTがMessaging apiを正式にリリースしたので翻訳BOTを作りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wise.guncy.com&#34; target=&#34;_blank&#34;&gt;wise.guncy.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式の通訳BOTも何個かあるのに何で今更翻訳BOT? と思う人もいるかも知らないですが、理由は2つあります。&lt;/p&gt;

&lt;h3 id=&#34;1-汎用性の問題&#34;&gt;1. 汎用性の問題&lt;/h3&gt;

&lt;p&gt;LINE公式通訳BOTをディスってるわけではないが、正直言って不便でした。日英、日中、日韓と一つ一つが単体のBOTになっていて、一つのグループに複数BOTを招待できないのと、あくまで日本語をベースにしてるので、例えば韓国語を英語に翻訳することはできません。&lt;/p&gt;

&lt;h3 id=&#34;2-進化した翻訳技術&#34;&gt;2. 進化した翻訳技術&lt;/h3&gt;

&lt;p&gt;ちょっと前に話題になっていた翻訳技術の進化です。ニューラルネットワーク機械学習の応用により翻訳の精度が今までと比較できないレベルまで進化してきました。&lt;/p&gt;

&lt;p&gt;上の理由から今更なんですが翻訳BOTを作りました。英語がダメな私はまず普段辞書の代わりによく使うと思います。&lt;/p&gt;

&lt;h3 id=&#34;エンジニア的な話をちょっと&#34;&gt;エンジニア的な話をちょっと&lt;/h3&gt;

&lt;p&gt;今はdocker container一つで動かしていて正直言ってどれくらいのリクエストで死ぬかわからないです。
このBOTの利用者が増えてリクエストをさばけない時にはサーバー増やしたりスペック上げたりなど考えることにしました。
エンジニア達はすぐ分かったと思いますが、この俺が翻訳エンジンなんか作れるわけではないので、Google Translate APIを使ってます。
こいつにも金取られるので、これ以上無理だと判断した時にはまた考えようかと思います。
BOTサーバーはGo言語で書いていて、LINE BOT API Trialの時から自前で作ったGo言語用SDKを使ってます。
&lt;a href=&#34;https://github.com/dongri/line-bot-sdk-go&#34;&gt;line-bot-sdk-go&lt;/a&gt; 。
Landing PageはF7さんのLp使いました。 &lt;a href=&#34;https://github.com/F7/Lp&#34;&gt;https://github.com/F7/Lp&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;line-bot-awards&#34;&gt;LINE BOT AWARDS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://botawards.line.me&#34;&gt;https://botawards.line.me&lt;/a&gt; これなんですが、この翻訳BOTはある意味今のLINE公式通訳BOTと競合？してるので、どうかなと思いますｗ。
それと元中の人だったので応募するとなんか気まずいところもあって、悩んてるところですｗ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code review</title>
      <link>https://dongri.github.io/post/2016-10-13-code-review.html</link>
      <pubDate>Thu, 13 Oct 2016 21:08:26 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-10-13-code-review.html</guid>
      <description>

&lt;p&gt;こういうコードレビュー系の記事はたくさんありますが、大手もスタートアップも経験した私からコードレビューついて今まで悩んてたところと気を付けてたところをリストしてみようと思います。&lt;/p&gt;

&lt;h2 id=&#34;レビューが終わってるかどうかわからない問題&#34;&gt;レビューが終わってるかどうかわからない問題&lt;/h2&gt;

&lt;p&gt;PR出して半日経ったけど、コメントがない。やっとコメントが入り半日経過。よっし、レビューの修正とコメントに返信しようと思い修正なり、コメントに返事する。しかし、レビュー終わってなかった。また残りのレビューでコメントが入る。この繰り返しが数日続く時もある。こういうレビューの反映はほかのタスクやってうちに割り込みで対応するのでおそらくコードのクオリティよくないでしょう。割り込みで本来のタスクにも影響がでますよね。なのでレビュアーは時間をかけてもいいから一気にレビューして最後にレビュー終わりましたの合図を出すべきです。&lt;/p&gt;

&lt;h2 id=&#34;言葉使いの問題&#34;&gt;言葉使いの問題&lt;/h2&gt;

&lt;p&gt;「こうしてください。」「こうしたほうがいい。」「これ意味分からないｗｗｗ」などなど、理由もなしにこういう言い方されるとイラッとしますよね？こうしてくださいの代わりにこういう理由があってこうした方がいいと思います。この部分の意図が理解できないので説明してくれると助かります。などなど、代わりの言葉はいくらでもあると思います。敬語はもちろんで、です、ますだけではなく言い方にも気を付けましょう。&lt;/p&gt;

&lt;h2 id=&#34;アサインされても気付かない問題&#34;&gt;アサインされても気付かない問題&lt;/h2&gt;

&lt;p&gt;PR出したけど、なかなか見てくれない。しょうがなくダイレクトメールかチャットでURL送ってお願いする場合もありますね。この問題はツールで解決できる問題だと思います。一日2,3回自分にアサインされて見てないPRをメールか、チャットで催促など、方法はいくらでもあるので、問題ないはずです。しかし、気付いたけどわざと見ないのはその人達間の人間関係の問題で解決方法は別途探しましょう。&lt;/p&gt;

&lt;h2 id=&#34;対象ではないことろに触れる問題&#34;&gt;対象ではないことろに触れる問題&lt;/h2&gt;

&lt;p&gt;プロジェクト全体のコードが理想の形になってない状態で1つの小さなPRでプロジェクト全体に対してのツッコミが入る時があります。それは今回のPRと関係ないです！と返す人もプロジェクト全体のコードを綺麗にしたいレビュアーもどっちも悪くはない思います。やる気あって且つデキる人はわかった全部直してやる！黙々と今回のPRと関係ないところも修正してPRを出し直す人もいれば、この機能のリリースが先だ、そんなの知らないよ！と返す人もいると思います。この辺は優先順位を決めれる人を捕まえて話し合いが必要ですね。&lt;/p&gt;

&lt;h2 id=&#34;土日レビューしてくれる人がいない問題&#34;&gt;土日レビューしてくれる人がいない問題&lt;/h2&gt;

&lt;p&gt;若者が（若者に限らないが）土日やる気出して1つの機能追加してリリースしたいのにレビュー出してもレビューしてくれそうな人がいない時があると思います。月曜日まで待ちたくない、今すぐリリースしたい、こういう時どうすればいいのか？自分でPR作って自分でマージする。コードレビューの意味がなくなってる。そもそもそういう若者をフォロー出来ないのは組織の問題なので、ここではその辺の話には触れたくないです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust on Heroku with Docker</title>
      <link>https://dongri.github.io/post/2016-08-16-rust-heroku-docker.html</link>
      <pubDate>Tue, 16 Aug 2016 00:42:53 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-08-16-rust-heroku-docker.html</guid>
      <description>&lt;p&gt;Rustで書いたhello rustをherokuに載せてみた。
普通ならrust用のBuildpack使うのだが、今回はdockerを使うようにした。
Dockerfile、ソースコードなどはこちら&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/hello-rust&#34;&gt;https://github.com/dongri/hello-rust&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;はじめはalpineで頑張ってみようかと思ったがrustのインストールがうまく行かなくて、ubuntuに変更。
Dockerfileは以下のようになっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM ubuntu:latest

# rust, cargo buildに必要なソフトウェアインストール
RUN apt-get -y update
RUN apt-get -y install curl file sudo gcc

# rustのインストール
RUN curl -sSf https://static.rust-lang.org/rustup.sh | sh

RUN mkdir -p /app
WORKDIR /app
COPY . /app

# ビルドして ./target/release/helloバイナリを作る
RUN cargo build --release

EXPOSE 8080

# 実行
CMD /app/target/release/hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;readmeにも書いてあるがherokuはdockerをサポートしていて、pushするだけでローカルのdockerと
同じように動かせる。必要なのは、heroku-container-toolsというheroku plugin。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku plugins:install heroku-container-tools
$ heroku container:push web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでだけでherokuにアップされて動く。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hello-rust.herokuapp.com/&#34;&gt;https://hello-rust.herokuapp.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Goodbye Instagram</title>
      <link>https://dongri.github.io/post/2016-08-15-goodbye-instagram.html</link>
      <pubDate>Mon, 15 Aug 2016 00:32:35 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-08-15-goodbye-instagram.html</guid>
      <description>&lt;p&gt;ついにInstagramの写真まで全部消した。API仕様が変わってからずっと投稿してなくて、写真残しても意味ないと思って全部消してしまった。&lt;/p&gt;

&lt;p&gt;Instagramは他のSNSと違って見てると気分がよくなる。
Twitterみたいに他人の悪口も無ければ毒もない。
あるのは綺麗な景色と美味しそうな食べ物と可愛いペット、見ててこの世の中は幸せだなと思うぐらいだ。&lt;/p&gt;

&lt;p&gt;しかし、それがFacebookに買われた後からかどうかは分からないが、タイムラインがFacebookのように
時系列ではなく勝手にユーザーの好みに合わせて表示されるようになったみたい。
猫にいいねたくさんすると猫の写真が優先されたり、美人の写真によくいいねをすると美人の写真が上に表示されたり、とにかく「おまら勝手に！」。&lt;/p&gt;

&lt;p&gt;実はInstagramがWeb版がない時代からAPIを使って「Stagram」という名前でブラウザでInstagramの写真見れるサービス？作って、
趣味でInstagramのiOS、Androidアプリまで作るぐらいInstagramが好きだった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://flic.kr/s/aHskEFaE1Y&#34;&gt;https://flic.kr/s/aHskEFaE1Y&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;タイムラインが気持ち悪くパソナライズされたのと別に私がやめた理由はAPI制限だった。
前までは楽しいAPIで自分の写真はもちろん、他人の写真まで自分が好きなようにいじれた。
しかしそのAPIが6月1日から変わった、ずっとまえから変わるとブログには書いてあったがついに変わって、
ちゃんとした理由でAPIクライアントを申請して審査通らないとほとんどのAPIが使えない。
APIの制限にはそれなりの理由があると思うが、これ以上付き合いたくなくなった。&lt;/p&gt;

&lt;p&gt;有用性、透明性、正当性、、、俺みたいなやつがプライベートでそんな意識高いのサービス、アプリを作れるのか？！バカヤロー w&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>認めるエンジニア</title>
      <link>https://dongri.github.io/post/2016-08-13-engineer.html</link>
      <pubDate>Sat, 13 Aug 2016 20:11:11 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-08-13-engineer.html</guid>
      <description>&lt;p&gt;自分の弱点から言うと人を簡単に認めないこと。例えその人があることですごい成功したとしても気軽く認めないこと。&lt;/p&gt;

&lt;p&gt;でも、今まで認めたエンジニアは二人いる。一人は元L社のチームマネージャー、もう一人のはやめたAndroidエンジニア。&lt;/p&gt;

&lt;p&gt;一人目の元L社のチームマネージャーは検索エンジンや、ゲームプログラミングの出身でiOSの開発には知識はゼロと言っても過言ではない。
しかし途中で自分のコードにメモリリークじゃないの？こうやったほうがいいじゃないの？のアドバイスをしてくれた。
自分も確かにと思いながらやって、プロジェクトの終わりの飲み会でその真実を知った。
&amp;ldquo;大変だったよ、俺はiOSの知識が全く無くてお前らが書いたObjcコードを深夜3,4時まで本読みながら解読して勉強した。まあ過去の話だし、今日は飲もう！&amp;rdquo;&lt;/p&gt;

&lt;p&gt;もう一人はやめたやつだけど、厳しいやつだった。自分が作ったAPIのバグを探すのが趣味みたい。いろんな例外ケースを試してここがだめだ、そこがダメだ、と言ってくる。
言ってることが正しいので、反論することなく修正してあげる。というかあいつはなんでそんな例外ケースを思い出すんだろうと思うぐらいだ。
普段は無口で余計なことはしゃべらず、ただただ論理的にシステムを正しく設計しようとしてた。&lt;/p&gt;

&lt;p&gt;よく考えてみると二人は共通点がある。なにことも終わってから話すことだ。
先にここがもしかしてダメじゃない？とかなくて、自分まず試してから話す、要は手を動かす人達だった。
それにわざわざ仕事のアピールする人ではなかった。どっちも普段無口でコレをやるの宣言してからやるのではなく、コレをやった派だった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>新卒SI</title>
      <link>https://dongri.github.io/post/2016-07-22-SI.html</link>
      <pubDate>Fri, 22 Jul 2016 02:10:36 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-07-22-SI.html</guid>
      <description>&lt;p&gt;新卒でSIの会社に入った。小さい会社で社員研修もくそもない。&lt;/p&gt;

&lt;p&gt;初日から社長に取引先(現場)に連れて行って面接。面接で初めて気付いた、履歴書に俺の年が2つ上がってる！しかも入社三年目。いろんなシステム開発経験あり、いろんな言語でコード書ける、いろんなデータベース触ったことあることになってる。まあ、しょうがない、知ってるふりして質問に答えた。幸いに面接パスして現場で働けるようになった。&lt;/p&gt;

&lt;p&gt;面接がそんなもんだから、同然現場では新卒扱いされない、いきなりJavaでフレームワーク作りに入る。業務関連の質問はできるけど、技術的な質問はできない雰囲気になってる。Javaもデータベースも知ってるふりしながら家に帰って必死にググる。それが数ヶ月続いたら本当にJavaもデータベースも知るようになった。&lt;/p&gt;

&lt;p&gt;今も偶にその時の社長と飲みに行くんだけど、その時の履歴書改竄の話出ると笑いながら「しょうがないじゃ、現場のマネージャーは新卒はいらないと言ってるから、、、」&lt;/p&gt;

&lt;p&gt;多分その時のよくない経験が影響してるか、その後現場が変わっても転職して別の会社に行っても業務関連の質問はよくするけど、技術的な質問はあんまりしないでググるか、本を買うことになってる。&lt;/p&gt;

&lt;p&gt;幸いに途中で師匠に出会えていろいろ勉強ができた。技術だけではなく、社会人としての常識的なものも勉強できた。&lt;/p&gt;

&lt;p&gt;偶に思うのは、もしちゃんとした社員研修もあって、何でも聞ける先輩がいる会社に新卒で入ったら俺はどれだけできる人間になったかなとwww。その逆もありうるけどね。&lt;/p&gt;

&lt;p&gt;(今日ツイッターで「新卒SI」についてブログ書くと宣言したので、ここまで書くか)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello Rust</title>
      <link>https://dongri.github.io/post/2016-07-13-hello-rust.html</link>
      <pubDate>Wed, 13 Jul 2016 23:35:22 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-07-13-hello-rust.html</guid>
      <description>

&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ brew search rust
multirust    rust    uncrustify
$ brew install rust

$ rustc --version
rustc 1.10.0
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;hello-world&#34;&gt;hello world&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ vim hello.rs
fn main() {
    println!(&amp;quot;Hello Rust!&amp;quot;);
}

$ rustc hello.rs
$ ./hello
Hello Rust!
$
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Wireless adb</title>
      <link>https://dongri.github.io/post/2016-05-10-wireless-adb.html</link>
      <pubDate>Tue, 10 May 2016 22:21:05 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-05-10-wireless-adb.html</guid>
      <description>

&lt;p&gt;毎回USB繋げるのが面倒。&lt;/p&gt;

&lt;p&gt;wifi環境でandroid adb shellできるようにした。&lt;/p&gt;

&lt;h3 id=&#34;adb-tcpip-listen-port&#34;&gt;adb tcpip listen_port&lt;/h3&gt;

&lt;p&gt;USBで繋げて&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ adb tcpip 5555
restarting in TCP mode port: 5555
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adb-connect-ip-address-lesten-port&#34;&gt;adb connect ip_address:lesten_port&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ adb connect 192.168.10.5:5555
connected to 192.168.10.5:5555

$ adb devices
List of devices attached
192.168.10.5:5555       device
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adb-shell&#34;&gt;adb shell&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ adb shell
shell@bullhead:/ $ su
root@bullhead:/ # ls -la
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでUSBケーブルなくてもadb shellで繋げるようになった。&lt;/p&gt;

&lt;h3 id=&#34;warning&#34;&gt;Warning&lt;/h3&gt;

&lt;p&gt;このまま放置しておくとIPアドレスバレると誰からもadbで入れるので、終わったら adb usbでusbモードに戻しておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ adb usb
restarting in USB mode
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;追記&#34;&gt;追記&lt;/h3&gt;

&lt;p&gt;wifi環境が変わったりすると不安定になるので、app使ったほうが簡単だし、安全&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.ttxapps.wifiadb&#34;&gt;https://play.google.com/store/apps/details?id=com.ttxapps.wifiadb&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nexus 5X クリーンインストール &amp; Root化</title>
      <link>https://dongri.github.io/post/2016-05-03-nexus-root.html</link>
      <pubDate>Tue, 03 May 2016 01:36:00 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-05-03-nexus-root.html</guid>
      <description>

&lt;h2 id=&#34;factory-image&#34;&gt;Factory Image&lt;/h2&gt;

&lt;p&gt;Googleが公開しているNexus端末向けの初期ROMデータのことを言います。
Factory Imageには、「system・boot（Kernel）・recovery・bootloader・radio・userdata・cache」などの各領域のイメージが含まれており、
それらを端末に書き込むことで領域を完全に初期化することが出来ます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/android/nexus/images&#34;&gt;https://developers.google.com/android/nexus/images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;nexus5xのところの最新のものをダウンロードして解凍する&lt;/p&gt;

&lt;h2 id=&#34;oemロック解除&#34;&gt;OEMロック解除&lt;/h2&gt;

&lt;p&gt;開発者向けオプションで「OEMロック解除を有効にする」にチェックを入れる&lt;/p&gt;

&lt;h2 id=&#34;ブートローダーをアンロック&#34;&gt;ブートローダーをアンロック&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ adb reboot bootloader // もしくは、電源ボタンとボリュームダウンボタンを同時に長押し
$ fastboot oem unlock
...
OKAY [ 20.966s]
finished. total time: 20.966s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでbootloaderがunlockの状態になる&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DEVICE STATE - locked&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;↓&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DEVICE STATE - unlocked&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;flash-all&#34;&gt;flash-all&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ cd bullhead-mhc19q
$ ./flash-all.sh
...
OKAY [  0.214s]
writing &#39;cache&#39;...
OKAY [  0.061s]
rebooting...

finished. total time: 86.174s
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;カスタムリカバリの導入&#34;&gt;カスタムリカバリの導入&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twrp.me/devices/lgnexus5x.html&#34;&gt;https://twrp.me/devices/lgnexus5x.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download Links で 最新のimgファイルダウンロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ fastboot flash recovery twrp-3.0.2-0-bullhead.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブートローダー画面から「Recovery mode」を選択すると導入したTWRPを起動できるようなりました。&lt;/p&gt;

&lt;h2 id=&#34;root化&#34;&gt;Root化&lt;/h2&gt;

&lt;p&gt;SuperSUの最新版を見つけて入れる。バージョンが違うとAndroid自体が起動できなかったりするのでご注意を&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://download.chainfire.eu/932/SuperSU/BETA-SuperSU-v2.71-20160331103524.zip&#34;&gt;https://download.chainfire.eu/932/SuperSU/BETA-SuperSU-v2.71-20160331103524.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BETA-SuperSU-v2.71-20160331103524.zipを端末に転送して、install&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ adb push BETA-SuperSU-v2.71-20160331103524.zip /sdcard/
4103 KB/s (4015219 bytes in 0.955s)
$ adb reboot bootloader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recovery modeを選択して決定、「Install」より先ほどダウンロードしたSuperSUを選択して書き込む。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://g.co/ABH&#34;&gt;http://g.co/ABH&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;警告でるが、電源ボタンを２回押して続ける。&lt;/p&gt;

&lt;p&gt;再起動されるが、めっちゃ遅い&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.&lt;/p&gt;

&lt;p&gt;これでroot取れた。&lt;/p&gt;

&lt;p&gt;やり放題。ubuntu入れて、webサーバー立てる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>エンジニア軽蔑チェーン</title>
      <link>https://dongri.github.io/post/2016-02-22-the-programmer-hierarchy.html</link>
      <pubDate>Tue, 23 Feb 2016 00:05:42 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-02-22-the-programmer-hierarchy.html</guid>
      <description>

&lt;h2 id=&#34;言語編&#34;&gt;言語編&lt;/h2&gt;

&lt;p&gt;Functional Programmingをわかるエンジニアはよくデザインパターンを口にするエンジニアを軽蔑する。
よくデザインパターンを口にするエンジニアは「そのように書くとオブジェクト指向ではない」と言うエンジニアを軽蔑する。
「そのように書くとオブジェクト指向ではない」と言うエンジニアは「重複するコードをfunctionにまとめばいいじゃ」と言ってるエンジニアを軽蔑する。
コードをコピしてあっちこっちに貼り付けるエンジニアはPMを軽蔑する。&lt;/p&gt;

&lt;p&gt;アセンブラ書くエンジニアはC言語書くエンジニアを軽蔑する。
C言語書くエンジニアはC++書くを軽蔑する。
C++書くエンジニアはC#書くエンジニアを軽蔑する。
C#書くエンジニアはHTMLを一種のプログラミング言語と思ってるデザイナーを軽蔑する。&lt;/p&gt;

&lt;p&gt;Python3エンジニアはPython2エンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;iOSエンジニアはAndroidエンジニアを軽蔑する。
AndroidエンジニアはWindows Phoneエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;一年のSwift経験あるエンジニアは5年のObjective-C経験持つエンジニアを軽蔑する。
Objective-C書くエンジニアはPhoneGap書くエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;React.js書くエンジニアはAngularJS書くエンジニアを軽蔑する。
AngularJS書くエンジニアはjQuery書くエンジニアを軽蔑する。
jQuery書くエンジニアはVanilla JSを書くエンジニアを軽蔑する。
Vanilla JS書くエンジニアはIE使用者を軽蔑する。&lt;/p&gt;

&lt;p&gt;debuggerを使えるエンジニアはassertを使ってるエンジニアを軽蔑する。
assertを使えるエンジニアはprint()しか書けないエンジニアを軽蔑する。
console.logでdebugするエンジニアはalertでdebugするエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Ruby on Railsエンジニアはその他すべての言語のエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;すべてのエンジニアはPHPエンジニアを軽蔑する。&lt;/p&gt;

&lt;h2 id=&#34;ツール編&#34;&gt;ツール編&lt;/h2&gt;

&lt;p&gt;text editorを使ってるエンジニアはIDEを使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Vim使ってるエンジニアはEmacs使ってるエンジニアを軽蔑する、Emacs使ってるエンジニアはVimを使ってるエンジニアを軽蔑する。
VimとEmacs使ってるエンジニアはほかすべてのtext editorを使ってるエンジニアを軽蔑する。例えば：atom, sublime, windows editor&lt;/p&gt;

&lt;p&gt;Android Studioを使ってるか、IntelliJ IDEAを使ってるエンジニアはEclipse使ってるエンジニアを軽蔑する。
Eclipse使ってるエンジニアはNetBeans使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;GitかMercurialを使ってるエンジニアはSubversionを使ってるエンジニアを軽蔑する。
Subversionを使ってるエンジニアはDropboxでバージョン管理してるエンジニアを軽蔑する。
Dropboxでバージョン管理してるエンジニアはバージョン管理しないエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Githubを知ってるエンジニアはGithubを知らないエンジニアを軽蔑する。
Githubでprivate repoを持ってるエンジニアは無料repoのためBitBucketに行っちゃうエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Zsh使ってるエンジニアはBashを使ってるエンジニアを軽蔑する。
Bashを使ってるエンジニアはCygwinを使ってるエンジニアを軽蔑する。
Cygwinを使ってるエンジニアはGUIツール使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;IRCを使ってるエンジニアはHipChatを使ってるエンジニアを軽蔑する。
HipChatを使ってるエンジニアはSlackを使ってるデザイナーを軽蔑する。&lt;/p&gt;

&lt;p&gt;reStructuredTextで文章作成するエンジニアはMarkdownで文章作成するエンジニアを軽蔑する。
Markdownで文章作成するエンジニアはHTMLで文章作成するエンジニアを軽蔑する。
HTMLで文章作成するエンジニアは文章書かないエンジニアを軽蔑する。
LaTeX使って文章作成するエンジニアはすべてのエンジニアを軽蔑する&lt;/p&gt;

&lt;p&gt;Nginxを使ってるエンジニアはApacheを使ってるエンジニアを軽蔑する。
Apacheを使ってるエンジニアはIISを使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Dockerでサーバー構築するエンジニアはAnsible、Puppetでサーバー構築するエンジニアを軽蔑する。
Ansible、Puppetでサーバー構築するエンジニアはFabricでサーバー構築するエンジニアを軽蔑する。
Fabricでサーバー構築するエンジニアは手動SSHするエンジニアを軽蔑する。&lt;/p&gt;

&lt;h2 id=&#34;os編&#34;&gt;OS編&lt;/h2&gt;

&lt;p&gt;Mac OS X使ってるエンジニアはLinux使ってるエンジニアを軽蔑する。
Linux使ってるエンジニアはWindows使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Debian使ってるエンジニアはUbuntu使ってるエンジニアを軽蔑する。
Ubuntu使ってるエンジニアは非LTS版Ubuntuを使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;h2 id=&#34;ハードウエア編&#34;&gt;ハードウエア編&lt;/h2&gt;

&lt;p&gt;MacBook Pro Retina使ってるエンジニアはMacBook Air使ってるエンジニアを軽蔑する。
MacBook Air使ってるエンジニアはThinkPad使ってるエンジニアを軽蔑する。
そして、Raspberry Piを使ってるエンジニアはMacBook Pro Retinaを使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;h2 id=&#34;職場編&#34;&gt;職場編&lt;/h2&gt;

&lt;p&gt;ハードウェアエンジニアはソフトウェアエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;OSを書くエンジニアはWebエンジニアを軽蔑する。
WebエンジニアはDesktop Applicationを書くエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;バックエンドエンジニアはフロントエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;エンジニアとデザイナーはお互いに軽蔑する。&lt;/p&gt;

&lt;p&gt;Test-Drivenエンジニアは先にコードを書いて後でtestを書くエンジニアを軽蔑する。
先にコード書いて後でtest書くエンジニアはtest書かないエンジニアを軽蔑する。
test書かないエンジニアは頻繁に仕様変更するPMを軽蔑する。&lt;/p&gt;

&lt;p&gt;資格持ってないエンジニアは資格をたくさん持ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;私服で出社するエンジニアはスーツ着て出社するエンジニアを軽蔑する。&lt;/p&gt;

&lt;h2 id=&#34;終わり&#34;&gt;終わり&lt;/h2&gt;

&lt;p&gt;wechat moments流れてた記事が面白くで日本語にしました。これ10年後に見ると面白いかも知らないですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://dongri.github.io/post/2016-01-17-hugo.html</link>
      <pubDate>Sun, 17 Jan 2016 15:20:15 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-01-17-hugo.html</guid>
      <description>

&lt;p&gt;macクリーンインストールした後、middlemanのインストールでgemにバージョンとかでいろいろ引っかかったので、hugoに引っ越しするようにした。
もともとビルドが遅いmiddlemanそんなに好きではなかったし、いいきっかけたと思って引越しした。いい感じ。&lt;/p&gt;

&lt;h3 id=&#34;hgが必要なのでhgをインストールする&#34;&gt;hgが必要なのでhgをインストールする&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ brew install hg
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hugoインストール&#34;&gt;hugoインストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ go get -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;site作成&#34;&gt;site作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site dongri.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テーマを取得&#34;&gt;テーマを取得&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cd dongri.github.io
$ git clone --recursive https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テーマ設定&#34;&gt;テーマ設定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ vim config.toml
...
theme = &amp;quot;boro&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;post作成&#34;&gt;post作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/2016-01-17-hugo.md
$ vim post/2016-01-17-hugo.md
+++
date = &amp;quot;2016-01-17T15:20:15+09:00&amp;quot;
title = &amp;quot;Hugo&amp;quot;
tags = [&amp;quot;blog&amp;quot;]
+++

hogehoge
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;サーバー起動して確認&#34;&gt;サーバー起動して確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -w
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;github-pagesにデプロイ&#34;&gt;github pagesにデプロイ&lt;/h3&gt;

&lt;p&gt;hugo siteをrepoAにして、publicをsubtreeで username.github.io にして毎回pushする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;deploy.sh&lt;/code&gt; を作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;Deploying updates to GitHub...&amp;quot;

# Build the project.
hugo

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master
git subtree push --prefix=public git@github.com:dongri/dongri.github.io.git master
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android Stagefright</title>
      <link>https://dongri.github.io/post/2015-07-28-android-stagefright.html</link>
      <pubDate>Tue, 28 Jul 2015 11:28:57 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2015-07-28-android-stagefright.html</guid>
      <description>

&lt;p&gt;詳しいことはこちら。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/07/28/20150727nasty-bug-lets-hackers-into-nearly-any-android-phone-using-nothing-but-a-message/&#34;&gt;Androidに最悪の脆弱性発見―ビデオメッセージを受信するだけでデバイスが乗っ取られる&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ということで、まずSIMを抜いてOSのバージョンアップするようにした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://plus.google.com/+CyanogenMod/posts/7iuX21Tz7n8&#34;&gt;CyanogenMod: Recent Stagefright issues&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;zip-fileダウンロードしてインストール&#34;&gt;Zip Fileダウンロードしてインストール&lt;/h3&gt;

&lt;p&gt;こちらから最新版cm-12.1をダウンロード。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://download.cyanogenmod.org/?device=bacon&#34;&gt;https://download.cyanogenmod.org/?device=bacon&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ adb push cm-12.1-20150728-NIGHTLY-bacon.zip /sdcard/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TWRPでinstallを選択して、cm-12.1-20150728-NIGHTLY-bacon.zipを選択してインストール&lt;/p&gt;

&lt;h3 id=&#34;google-appsインストール&#34;&gt;Google Appsインストール&lt;/h3&gt;

&lt;p&gt;CMではデフォルトでGoogle Apps入ってないので、追加でインストールする。
こちらからarmバージョンをダウンロードする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cgapps/vendor_google&#34;&gt;https://github.com/cgapps/vendor_google&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ adb push gapps-5.1-arm-2015-07-17-13-29.zip /sdcard/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TWRPでinstallを選択して、gapps-5.1-arm-2015-07-17-13-29.zipを選択してインストール&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Goodbye Heroku</title>
      <link>https://dongri.github.io/post/2015-05-11-goodbye-heroku.html</link>
      <pubDate>Mon, 11 May 2015 11:28:57 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2015-05-11-goodbye-heroku.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/dongriat/16899138724&#34; title=&#34;heroku_shot by Dongri Jin, 於 Flickr&#34;&gt;&lt;img src=&#34;https://c1.staticflickr.com/9/8707/16899138724_1bc1099219_z.jpg&#34; width=&#34;640&#34; height=&#34;479&#34; alt=&#34;heroku_shot&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これが2007年同時のherokuでした。エディタ使わずブラウザでコード書いてSaveするとRailsが動く！素晴らしい！&lt;/p&gt;

&lt;p&gt;その後gitが流行り始めgit pushでデプロイできるようになりましたね。heroku buttonも出てOne Clickでデプロイできるようになったり。&lt;/p&gt;

&lt;p&gt;2007年から今まで使ってて、Privateのプロジェクトも一時には会社のプロジェクトにも使いました。&lt;/p&gt;

&lt;p&gt;初めはRubyだけだったのが、今はjava, scala, php, python, nodejs, goまでサポートしてます。最近はdockerもサポートするので、言語問わなくデプロイできちゃいますね。&lt;/p&gt;

&lt;p&gt;herokuの特徴と言えばとりあえず動かせるを場を提供する。そのかわりファイルアップロードできない、一定時間でスリープ、などいろいろ制限されるけど、sandboxとしては十分で便利なプラットフォームです。&lt;/p&gt;

&lt;p&gt;自分のリポジトリ数えてみたらびっくりしました。50個近くのアプリがデプロイされてました。(ほとんどがゴミ w w w)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.heroku.com/archives/2015/5/7/new-dyno-types-public-beta&#34;&gt;https://blog.heroku.com/archives/2015/5/7/new-dyno-types-public-beta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんなので自分の遊びがなくなりました。$7 払えないわけではない。しかし昔みたいにとりあえずherokuみたいな感じにはなれない。&lt;/p&gt;

&lt;p&gt;herokuの代わりのものを Google Cloud, AWS も検討してみましたが、結局は DigitalOceanでサーバー立てて、&lt;a href=&#34;https://github.com/progrium/dokku&#34;&gt;dokku&lt;/a&gt; 入れて自分専用の遊び場を作ることにしました。&lt;/p&gt;

&lt;p&gt;今のところ4GBでnode, rails, goなど10個のcontainer立ち上げても問題なさそうです。&lt;/p&gt;

&lt;p&gt;heroku長い間お世話になりました！&lt;/p&gt;

&lt;p&gt;Goodbye! Heroku!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>