<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on D</title>
    <link>https://dongri.github.io/tags/blog/</link>
    <description>Recent content in Blog on D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Aug 2016 20:11:11 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>認めるエンジニア</title>
      <link>https://dongri.github.io/post/2016-08-13-engineer/</link>
      <pubDate>Sat, 13 Aug 2016 20:11:11 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-08-13-engineer/</guid>
      <description>&lt;p&gt;自分の弱点から言うと人を簡単に認めないこと。例えその人があることですごい成功したとしても気軽く認めないこと。&lt;/p&gt;

&lt;p&gt;でも、今まで認めたエンジニアは二人いる。一人は元L社のチームマネージャー、もう一人のはやめたAndroidエンジニア。&lt;/p&gt;

&lt;p&gt;一人目の元L社のチームマネージャーは検索エンジンや、ゲームプログラミングの出身でiOSの開発には知識はゼロと言っても過言ではない。
しかし途中で自分のコードにメモリリークじゃないの？こうやったほうがいいじゃないの？のアドバイスをしてくれた。
自分も確かにと思いながらやって、プロジェクトの終わりの飲み会でその真実を知った。
&amp;ldquo;大変だったよ、俺はiOSの知識が全く無くてお前らが書いたObjcコードを深夜3,4時まで本読みながら解読して勉強した。まあ過去の話だし、今日飲もう！&amp;rdquo;
そんなの早く言えば自分の知識を共有したのにと思いながら酒を飲んだ。&lt;/p&gt;

&lt;p&gt;もう一人目はやめたやつだけど、厳しいやつだった。俺が作ったAPIのバグを探すのが趣味みたい。いろんな例外ケースを試してここがだめだ、そこがダメだ、と言ってくる。
言ってることが正しいので、反論することなく修正してあげる。というかあいつはなんでそんな例外ケースを思い出すんだろうと思うぐらいだ。
普段は無口で余計なことはしゃべらない、ただただ論理的にシステムを正しく設計しようとしてる。&lt;/p&gt;

&lt;p&gt;よく考えてみると二人の共通点がある。なにことも終わってから話すことだ。
先にここがもしかしてダメじゃない？とかなくて自分だ試して、要は手を動かす人達だった。
それにわざわざ仕事アピールする人ではなかった。どっちも普段無口でコレをやるを宣言してからやるのではなくコレをやった派だった。無駄にアプールしないことだ。&lt;/p&gt;

&lt;p&gt;おそらく人間は自分に近い人を評価しやすいと思うがこの二人は求めてる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>新卒SI</title>
      <link>https://dongri.github.io/post/2016-07-22-SI/</link>
      <pubDate>Fri, 22 Jul 2016 02:10:36 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-07-22-SI/</guid>
      <description>&lt;p&gt;新卒でSIの会社に入った。小さい会社で社員研修もくそもない。&lt;/p&gt;

&lt;p&gt;初日から社長に取引先(現場)に連れて行って面接。面接で初めて気付いた、履歴書に俺の年が2つ上がってる！しかも入社三年目。いろんなシステム開発経験あり、いろんな言語でコード書ける、いろんなデータベース触ったことあることになってる。まあ、しょうがない、知ってるふりして質問に答えた。幸いに面接パスして現場で働けるようになった。&lt;/p&gt;

&lt;p&gt;面接がそんなもんだから、同然現場では新卒扱いされない、いきなりJavaでフレームワーク作りに入る。業務関連の質問はできるけど、技術的な質問はできない雰囲気になってる。Javaもデータベースも知ってるふりしながら家に帰って必死にググる。それが数ヶ月続いたら本当にJavaもデータベースも知るようになった。&lt;/p&gt;

&lt;p&gt;今も偶にその時の社長と飲みに行くんだけど、その時の履歴書改竄の話出ると笑いながら「しょうがないじゃ、現場のマネージャーは新卒はいらないと言ってるから、、、」&lt;/p&gt;

&lt;p&gt;多分その時のよくない経験が影響してるか、その後現場が変わっても転職して別の会社に行っても業務関連の質問はよくするけど、技術的な質問はあんまりしないでググるか、本を買うことになってる。&lt;/p&gt;

&lt;p&gt;幸いに途中で師匠に出会えていろいろ勉強ができた。技術だけではなく、社会人としての常識的なものも勉強できた。&lt;/p&gt;

&lt;p&gt;偶に思うのは、もしちゃんとした社員研修もあって、何でも聞ける先輩がいる会社に新卒で入ったら俺はどれだけできる人間になったかなとwww。その逆もありうるけどね。&lt;/p&gt;

&lt;p&gt;(今日ツイッターで「新卒SI」についてブログ書くと宣言したので、ここまで書くか)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>エンジニア軽蔑チェーン</title>
      <link>https://dongri.github.io/post/2016-02-22-the-programmer-hierarchy/</link>
      <pubDate>Tue, 23 Feb 2016 00:05:42 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-02-22-the-programmer-hierarchy/</guid>
      <description>

&lt;h2 id=&#34;言語編&#34;&gt;言語編&lt;/h2&gt;

&lt;p&gt;Functional Programmingをわかるエンジニアはよくデザインパターンを口にするエンジニアを軽蔑する。
よくデザインパターンを口にするエンジニアは「そのように書くとオブジェクト指向ではない」と言うエンジニアを軽蔑する。
「そのように書くとオブジェクト指向ではない」と言うエンジニアは「重複するコードをfunctionにまとめばいいじゃ」と言ってるエンジニアを軽蔑する。
コードをコピしてあっちこっちに貼り付けるエンジニアはPMを軽蔑する。&lt;/p&gt;

&lt;p&gt;アセンブラ書くエンジニアはC言語書くエンジニアを軽蔑する。
C言語書くエンジニアはC++書くを軽蔑する。
C++書くエンジニアはC#書くエンジニアを軽蔑する。
C#書くエンジニアはHTMLを一種のプログラミング言語と思ってるデザイナーを軽蔑する。&lt;/p&gt;

&lt;p&gt;Python3エンジニアはPython2エンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;iOSエンジニアはAndroidエンジニアを軽蔑する。
AndroidエンジニアはWindows Phoneエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;一年のSwift経験あるエンジニアは5年のObjective-C経験持つエンジニアを軽蔑する。
Objective-C書くエンジニアはPhoneGap書くエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;React.js書くエンジニアはAngularJS書くエンジニアを軽蔑する。
AngularJS書くエンジニアはjQuery書くエンジニアを軽蔑する。
jQuery書くエンジニアはVanilla JSを書くエンジニアを軽蔑する。
Vanilla JS書くエンジニアはIE使用者を軽蔑する。&lt;/p&gt;

&lt;p&gt;debuggerを使えるエンジニアはassertを使ってるエンジニアを軽蔑する。
assertを使えるエンジニアはprint()しか書けないエンジニアを軽蔑する。
console.logでdebugするエンジニアはalertでdebugするエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Ruby on Railsエンジニアはその他すべての言語のエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;すべてのエンジニアはPHPエンジニアを軽蔑する。&lt;/p&gt;

&lt;h2 id=&#34;ツール編&#34;&gt;ツール編&lt;/h2&gt;

&lt;p&gt;text editorを使ってるエンジニアはIDEを使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Vim使ってるエンジニアはEmacs使ってるエンジニアを軽蔑する、Emacs使ってるエンジニアはVimを使ってるエンジニアを軽蔑する。
VimとEmacs使ってるエンジニアはほかすべてのtext editorを使ってるエンジニアを軽蔑する。例えば：atom, sublime, windows editor&lt;/p&gt;

&lt;p&gt;Android Studioを使ってるか、IntelliJ IDEAを使ってるエンジニアはEclipse使ってるエンジニアを軽蔑する。
Eclipse使ってるエンジニアはNetBeans使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;GitかMercurialを使ってるエンジニアはSubversionを使ってるエンジニアを軽蔑する。
Subversionを使ってるエンジニアはDropboxでバージョン管理してるエンジニアを軽蔑する。
Dropboxでバージョン管理してるエンジニアはバージョン管理しないエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Githubを知ってるエンジニアはGithubを知らないエンジニアを軽蔑する。
Githubでprivate repoを持ってるエンジニアは無料repoのためBitBucketに行っちゃうエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Zsh使ってるエンジニアはBashを使ってるエンジニアを軽蔑する。
Bashを使ってるエンジニアはCygwinを使ってるエンジニアを軽蔑する。
Cygwinを使ってるエンジニアはGUIツール使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;IRCを使ってるエンジニアはHipChatを使ってるエンジニアを軽蔑する。
HipChatを使ってるエンジニアはSlackを使ってるデザイナーを軽蔑する。&lt;/p&gt;

&lt;p&gt;reStructuredTextで文章作成するエンジニアはMarkdownで文章作成するエンジニアを軽蔑する。
Markdownで文章作成するエンジニアはHTMLで文章作成するエンジニアを軽蔑する。
HTMLで文章作成するエンジニアは文章書かないエンジニアを軽蔑する。
LaTeX使って文章作成するエンジニアはすべてのエンジニアを軽蔑する&lt;/p&gt;

&lt;p&gt;Nginxを使ってるエンジニアはApacheを使ってるエンジニアを軽蔑する。
Apacheを使ってるエンジニアはIISを使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Dockerでサーバー構築するエンジニアはAnsible、Puppetでサーバー構築するエンジニアを軽蔑する。
Ansible、Puppetでサーバー構築するエンジニアはFabricでサーバー構築するエンジニアを軽蔑する。
Fabricでサーバー構築するエンジニアは手動SSHするエンジニアを軽蔑する。&lt;/p&gt;

&lt;h2 id=&#34;os編&#34;&gt;OS編&lt;/h2&gt;

&lt;p&gt;Mac OS X使ってるエンジニアはLinux使ってるエンジニアを軽蔑する。
Linux使ってるエンジニアはWindows使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;Debian使ってるエンジニアはUbuntu使ってるエンジニアを軽蔑する。
Ubuntu使ってるエンジニアは非LTS版Ubuntuを使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;h2 id=&#34;ハードウエア編&#34;&gt;ハードウエア編&lt;/h2&gt;

&lt;p&gt;MacBook Pro Retina使ってるエンジニアはMacBook Air使ってるエンジニアを軽蔑する。
MacBook Air使ってるエンジニアはThinkPad使ってるエンジニアを軽蔑する。
そして、Raspberry Piを使ってるエンジニアはMacBook Pro Retinaを使ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;h2 id=&#34;職場編&#34;&gt;職場編&lt;/h2&gt;

&lt;p&gt;ハードウェアエンジニアはソフトウェアエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;OSを書くエンジニアはWebエンジニアを軽蔑する。
WebエンジニアはDesktop Applicationを書くエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;バックエンドエンジニアはフロントエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;エンジニアとデザイナーはお互いに軽蔑する。&lt;/p&gt;

&lt;p&gt;Test-Drivenエンジニアは先にコードを書いて後でtestを書くエンジニアを軽蔑する。
先にコード書いて後でtest書くエンジニアはtest書かないエンジニアを軽蔑する。
test書かないエンジニアは頻繁に仕様変更するPMを軽蔑する。&lt;/p&gt;

&lt;p&gt;資格持ってないエンジニアは資格をたくさん持ってるエンジニアを軽蔑する。&lt;/p&gt;

&lt;p&gt;私服で出社するエンジニアはスーツ着て出社するエンジニアを軽蔑する。&lt;/p&gt;

&lt;h2 id=&#34;終わり&#34;&gt;終わり&lt;/h2&gt;

&lt;p&gt;wechat moments流れてた記事が面白くで日本語にしました。これ10年後に見ると面白いかも知らないですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://dongri.github.io/post/2016-01-17-hugo/</link>
      <pubDate>Sun, 17 Jan 2016 15:20:15 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2016-01-17-hugo/</guid>
      <description>

&lt;p&gt;macクリーンインストールした後、middlemanのインストールでgemにバージョンとかでいろいろ引っかかったので、hugoに引っ越しするようにした。
もともとビルドが遅いmiddlemanそんなに好きではなかったし、いいきっかけたと思って引越しした。いい感じ。&lt;/p&gt;

&lt;h3 id=&#34;hgが必要なのでhgをインストールする&#34;&gt;hgが必要なのでhgをインストールする&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ brew install hg
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hugoインストール&#34;&gt;hugoインストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ go get -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;site作成&#34;&gt;site作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site dongri.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テーマを取得&#34;&gt;テーマを取得&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cd dongri.github.io
$ git clone --recursive https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テーマ設定&#34;&gt;テーマ設定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ vim config.toml
...
theme = &amp;quot;boro&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;post作成&#34;&gt;post作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/2016-01-17-hugo.md
$ vim post/2016-01-17-hugo.md
+++
date = &amp;quot;2016-01-17T15:20:15+09:00&amp;quot;
title = &amp;quot;Hugo&amp;quot;
tags = [&amp;quot;blog&amp;quot;]
+++

hogehoge
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;サーバー起動して確認&#34;&gt;サーバー起動して確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -w
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;github-pagesにデプロイ&#34;&gt;github pagesにデプロイ&lt;/h3&gt;

&lt;p&gt;hugo siteをrepoAにして、publicをsubtreeで username.github.io にして毎回pushする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;deploy.sh&lt;/code&gt; を作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;Deploying updates to GitHub...&amp;quot;

# Build the project.
hugo

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master
git subtree push --prefix=public git@github.com:dongri/dongri.github.io.git master
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Birthday</title>
      <link>https://dongri.github.io/post/2015-02-03-birthday/</link>
      <pubDate>Tue, 03 Feb 2015 11:28:57 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2015-02-03-birthday/</guid>
      <description>&lt;p&gt;先月にFacebookの誕生日をOnly Meに設定して、誰も知らないように設定したのが始まり。&lt;/p&gt;

&lt;p&gt;今までは誕生日になると一日中、Facebookの友達から「誕生日おめでとう！」「Happy Birthday!」「생일축하해요」などのメッセージでnotificationが止まらない。
そして、キリの良い時に、全てのメッセージにLikeと「ありがとうございます！」とコメントを残す。で終わり。なんの感情も入ってない。。。&lt;/p&gt;

&lt;p&gt;今年はあえて見えないようにしてみた結果どうなったか？&lt;/p&gt;

&lt;p&gt;朝からWechatで祝いメッセージが来たり、
mixi経由でスタバックスのギフトカード送ってもらって一緒にスタバに行ったり、
Twitterで「今日誕生日って本当？Google Nowがそう言ってるけど」、
Facebookメッセンジャーで「誕生日おめでとうございます！」「どうやって知った？」「Skypeからreminderが来てね w」、
Google+から「생일이에요? 축하해요」だったり、とにかく意外なところから。&lt;/p&gt;

&lt;p&gt;一つ一つのメッセージが嬉しかった。一人一人が親しい友人だから！&lt;/p&gt;

&lt;p&gt;Facebookは隠せたけど、社内カレンダーの誕生日は消せなかったので、会社から素敵な誕生日ケーキで祝ってもらった。
同僚のみなさん、ありがとうございました！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>middleman blog</title>
      <link>https://dongri.github.io/post/2014-04-21-middleman-blog/</link>
      <pubDate>Mon, 21 Apr 2014 11:28:57 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2014-04-21-middleman-blog/</guid>
      <description>

&lt;p&gt;Octopress, Jekyll, Cabin いろいろあるみたいけど、Middlemanを使ってみようかと思って設置してみた。&lt;/p&gt;

&lt;h2 id=&#34;middleman-middleman-blogインストール&#34;&gt;middleman, middleman-blogインストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ gem install middleman
$ gem install middleman-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;middleman-プロジェクト作成&#34;&gt;middleman プロジェクト作成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ middleman init dongri.github.io --template=blog
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;レポジトリ設定&#34;&gt;レポジトリ設定&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ cd dongri.github.io
$ git init
$ git remote add origin git@github.com:dongri/dongri.github.io.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gemfile-を修正&#34;&gt;Gemfile を修正&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &amp;quot;middleman-deploy&amp;quot;
gem &amp;quot;middleman-livereload&amp;quot;
gem &amp;quot;middleman-syntax&amp;quot;
gem &amp;quot;redcarpet&amp;quot;
gem &amp;quot;nokogiri&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt; する。&lt;/p&gt;

&lt;h2 id=&#34;config-rb-を設定&#34;&gt;config.rb を設定&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Time.zone = &amp;quot;Tokyo&amp;quot;

page &amp;quot;archives/*&amp;quot;, layout: :post
page &amp;quot;archives/index.html&amp;quot;, layout: :layout

configure :build do
  activate :minify_css
  activate :minify_javascript
  activate :asset_hash
end

set :markdown_engine, :redcarpet
set :markdown, :fenced_code_blocks =&amp;gt; true, :smartypants =&amp;gt; true

activate :livereload
activate :directory_indexes
activate :syntax, line_numbers: true

# デプロイの設定
activate :deploy do |deploy|
  deploy.build_before = true
  deploy.method = :git
  deploy.branch = &#39;master&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;server起動&#34;&gt;server起動&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ middleman server
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;new-post&#34;&gt;New Post&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ middleman article new-post
      create  source/2014-04-21-new-post.html.markdown
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;source-2014-04-21-new-post-html-markdown-編集&#34;&gt;source/2014-04-21-new-post.html.markdown 編集&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
title: middleman blog
date: 2014-04-21
tags: middleman, blog
---

# ほげほげ

## Code

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-deploy&#34;&gt;build &amp;amp; deploy&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ middleman build
$ middleman deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;template-css&#34;&gt;template &amp;amp; css&lt;/h2&gt;

&lt;p&gt;theme, templateなどググっても出てこない。&lt;br /&gt;
しょうがなく自分デザイン?してcss組んでこんなページが生まれた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Article</title>
      <link>https://dongri.github.io/post/2012-01-01-example-article/</link>
      <pubDate>Sun, 01 Jan 2012 11:28:57 +0900</pubDate>
      
      <guid>https://dongri.github.io/post/2012-01-01-example-article/</guid>
      <description>&lt;p&gt;This is an example article. You probably want to delete it and write your own articles!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>