<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on D</title>
    <link>http://replace-this-with-your-hugo-site.com/tags/golang/</link>
    <description>Recent content in Golang on D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Feb 2015 11:28:57 +0900</lastBuildDate>
    <atom:link href="http://replace-this-with-your-hugo-site.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>new vs make</title>
      <link>http://replace-this-with-your-hugo-site.com/post/2015-02-09-new-vs-make/</link>
      <pubDate>Mon, 09 Feb 2015 11:28:57 +0900</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/2015-02-09-new-vs-make/</guid>
      <description>

&lt;h2 id=&#34;new:1c5b01150e8ff6dd5cd2e263909af39d&#34;&gt;new&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/builtin/#new&#34;&gt;http://golang.org/pkg/builtin/#new&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func new(Type) *Type
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;組み込み関数 new はメモリの割り当て、第一引数は型であり、値ではない。戻り値はポインタである。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;make:1c5b01150e8ff6dd5cd2e263909af39d&#34;&gt;make&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/builtin/#make&#34;&gt;http://golang.org/pkg/builtin/#make&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func make(Type, size IntegerType) Type
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;組み込み関数 make は slice, map, chan型のメモリ割り当てとオブジェクトを初期化する。&lt;/li&gt;
&lt;li&gt;new と似ている、第一に引数は型であり、値ではない。new との違いは、make の戻り値はポインタではなく、値である。第一引数の型による。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;まとめ:1c5b01150e8ff6dd5cd2e263909af39d&#34;&gt;まとめ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;new の役割はポインタの処理機か(*T)。make の役割は slice, map, chan 初期化かつ引用を戻す(T)。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
  i := new(int)
  fmt.Println(&amp;amp;i)
  fmt.Println(*i)
  *i = 1
  fmt.Println(*i)

  mySlice := make([]int, 10, 100)
  fmt.Println(mySlice)
  mySlice[2] = 2
  fmt.Println(mySlice)

  myMap := make(map[string]string)
  fmt.Println(myMap)
  myMap[&amp;quot;Android&amp;quot;] = &amp;quot;OnePlus&amp;quot;
  myMap[&amp;quot;iOS&amp;quot;] = &amp;quot;iPhone&amp;quot;
  fmt.Println(myMap)

  myChan := make(chan int, 2)
  myChan &amp;lt;- 1
  myChan &amp;lt;- 2
  fmt.Println(myChan)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Revel on Heroku</title>
      <link>http://replace-this-with-your-hugo-site.com/post/2014-12-11-revel-on-heroku/</link>
      <pubDate>Thu, 11 Dec 2014 11:28:57 +0900</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/2014-12-11-revel-on-heroku/</guid>
      <description>

&lt;p&gt;RevelをHerokuにデプロイしてみる。&lt;/p&gt;

&lt;h3 id=&#34;事前確認:8262f9878270e0993d374e4a15849ed6&#34;&gt;事前確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ echo $GOPATH
/Users/dongri/go

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;revelプロジェクト作成:8262f9878270e0993d374e4a15849ed6&#34;&gt;Revelプロジェクト作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ revel new team
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↑で $GOPATH/src/にteamフォルダが出来上がる&lt;/p&gt;

&lt;h3 id=&#34;ローカルで実行してみる:8262f9878270e0993d374e4a15849ed6&#34;&gt;ローカルで実行してみる&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ revel run team

$ open http://localhost:9000
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;herokuにbuildpackでデプロイ:8262f9878270e0993d374e4a15849ed6&#34;&gt;herokuにbuildpackでデプロイ&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ heroku create -b https://github.com/robfig/heroku-buildpack-go-revel.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;heroku画面でアプリの名前を変更する:8262f9878270e0993d374e4a15849ed6&#34;&gt;heroku画面でアプリの名前を変更する。&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ git remote -v
$ git retemo rm origin
$ git remote add origin git@heroku.com:[app].git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;godirファイル作成:8262f9878270e0993d374e4a15849ed6&#34;&gt;.godirファイル作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ pwd
/Users/dongri/go/src/team
$ echo &amp;quot;team&amp;quot; &amp;gt; .godir
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;デプロイ:8262f9878270e0993d374e4a15849ed6&#34;&gt;デプロイ&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ git add .
$ git commit -m &amp;quot;hoge&amp;quot;
$ git push origin master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で完了&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang on heroku</title>
      <link>http://replace-this-with-your-hugo-site.com/post/2014-10-11-golang-on-heroku/</link>
      <pubDate>Sat, 11 Oct 2014 11:28:57 +0900</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/2014-10-11-golang-on-heroku/</guid>
      <description>

&lt;p&gt;今までGolangプロジェクトはGoogle App Engineにデプロイしたが、管理画面がいまだに
使い慣れてないのとAppEngine特有の癖があるので、やめてherokuにデプロイしてみた。
herokuも公式にはGolang対応してなくて、buildpackを使わないとダメ。&lt;/p&gt;

&lt;p&gt;herokuサポート言語&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://devcenter.heroku.com/categories/language-support&#34;&gt;https://devcenter.heroku.com/categories/language-support&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;buildpackはこちら&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kr/heroku-buildpack-go&#34;&gt;https://github.com/kr/heroku-buildpack-go&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;まずローカルでgoプロジェクトを作成して確認みる:ffd1f55ca3ce303c9d76ae31529c3f0d&#34;&gt;まずローカルでGoプロジェクトを作成して確認みる。&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src

$ mkdir osakago
$ cd osakago
$ vim server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;net/http&amp;quot;
	&amp;quot;os&amp;quot;
)

func main() {
	http.HandleFunc(&amp;quot;/&amp;quot;, hello)
	fmt.Printf(&amp;quot;Server listening on port %v ...\n&amp;quot;, os.Getenv(&amp;quot;PORT&amp;quot;))
	err := http.ListenAndServe(&amp;quot;:&amp;quot;+os.Getenv(&amp;quot;PORT&amp;quot;), nil)
	if err != nil {
		panic(err)
	}
}

func hello(res http.ResponseWriter, req *http.Request) {
	fmt.Fprintln(res, &amp;quot;hello, world&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ PORT=8080 go run server.go
Server listening on port 8080 ...

$ curl -i localhost:8080
HTTP/1.1 200 OK
Date: Sat, 11 Oct 2014 05:04:01 GMT
Content-Length: 13
Content-Type: text/plain; charset=utf-8

hello, world
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;バイナリ作成-サーバー起動して確認:ffd1f55ca3ce303c9d76ae31529c3f0d&#34;&gt;バイナリ作成、サーバー起動して確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ go get
$ which osakago
/Users/you/go/bin/osakago
$ PORT=8080 osakago
$ curl -i localhost:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;heroku側設定:ffd1f55ca3ce303c9d76ae31529c3f0d&#34;&gt;Heroku側設定&lt;/h3&gt;

&lt;p&gt;メールアドレスとか変わった場合とか認証がうまくいかない場合があるので、念の為loginしておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku login
Enter your Heroku credentials.
Email: you@hoge.com
Password:
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;procfileファイル作成:ffd1f55ca3ce303c9d76ae31529c3f0d&#34;&gt;Procfileファイル作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;web: osakago&#39; &amp;gt; Procfile
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;godepインストール:ffd1f55ca3ce303c9d76ae31529c3f0d&#34;&gt;Godepインストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/kr/godep
$ godep save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Godepsフォルダ生成される。&lt;/p&gt;

&lt;h3 id=&#34;herokuにデプロイ:ffd1f55ca3ce303c9d76ae31529c3f0d&#34;&gt;Herokuにデプロイ&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ heroku create osakago -b https://github.com/kr/heroku-buildpack-go.git
Creating osakago... done, stack is cedar
BUILDPACK_URL=https://github.com/kr/heroku-buildpack-go.git
http://osakago.herokuapp.com/ | git@heroku.com:osakago.git

$ git add .
$ git commit -m &amp;quot;Hi&amp;quot;
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;( これからはherokuだな、さようなら～ AppEngine )&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>